name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      fresh_deploy:
        description: 'Fresh deployment (removes all data)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  REGISTRY: docker.io
  IMAGE_NAME: singhtwenty2/ssew-core-service

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Generate build number
        id: build-number
        run: echo "BUILD_NUMBER=$(date +%Y%m%d)-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:staging-${{ steps.build-number.outputs.BUILD_NUMBER }}
            ${{ env.IMAGE_NAME }}:staging-latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Create deployment directory if it doesn't exist
            mkdir -p /home/ubuntu/ssew-deployment
            cd /home/ubuntu/ssew-deployment
            
            # Download latest docker-compose.yml
            curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
            
            # Create .env file with all environment variables
            cat > .env << EOF
            IMAGE_TAG=staging-${{ steps.build-number.outputs.BUILD_NUMBER }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            APP_DEVELOPER_SECRET=${{ secrets.APP_DEVELOPER_SECRET }}
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            POSTGRES_DB=ssew
            POSTGRES_USER=ssew_owner
            POSTGRES_PASSWORD=ssew_staging_pass
            REDIS_PASSWORD=redis_staging_pass
            AWS_REGION=ap-south-1
            AWS_S3_TEMP_BUCKET=ssew-bucket-staging
            AWS_S3_TEMP_FOLDER=temp
            AWS_S3_PERMANENT_FOLDER=permanent
            # Override database URL to use local container
            SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/ssew
            SPRING_DATASOURCE_USERNAME=ssew_owner
            SPRING_DATASOURCE_PASSWORD=ssew_staging_pass
            SPRING_DATA_REDIS_URL=redis://:redis_staging_pass@redis:6379
            EOF
            
            # Set secure permissions on .env file
            chmod 600 .env
            
            # Check if this is a fresh deployment
            FRESH_DEPLOY="${{ github.event.inputs.fresh_deploy || 'false' }}"
            
            if [ "$FRESH_DEPLOY" = "true" ]; then
              echo "üî• Fresh deployment requested - removing all data"
              # Stop containers and remove volumes
              docker-compose down -v
              # Remove containers and volumes completely
              docker rm -f ssew-postgres ssew-redis ssew-app 2>/dev/null || true
              docker volume rm ssew-deployment_postgres_data 2>/dev/null || true
              docker volume rm ssew-deployment_redis_data 2>/dev/null || true
              echo "‚úÖ All data cleared"
            else
              echo "üîÑ Incremental deployment - preserving database data"
              # Only stop the app container, keep databases running
              docker-compose stop app
              docker rm -f ssew-app 2>/dev/null || true
            
              # Check if databases are running, if not start them
              if ! docker-compose ps postgres | grep -q "Up"; then
                echo "Starting PostgreSQL..."
                docker-compose up -d postgres
              fi
            
              if ! docker-compose ps redis | grep -q "Up"; then
                echo "Starting Redis..."
                docker-compose up -d redis
              fi
            fi
            
            # Clean up old app images
            docker image prune -f
            
            # Pull latest app image
            docker-compose pull app
            
            # Start/restart the application
            docker-compose up -d app
            
            # Wait for services to be healthy
            echo "Waiting for services to be healthy..."
            timeout=300
            while [ $timeout -gt 0 ]; do
              healthy_count=$(docker-compose ps | grep -c "healthy\|Up")
              total_services=$(docker-compose ps | grep -c "ssew-")
            
              if [ "$healthy_count" -eq "$total_services" ]; then
                echo "‚úÖ All services are up and healthy!"
                break
              fi
            
              echo "‚è≥ Waiting for services... ($timeout seconds remaining)"
              echo "   Healthy: $healthy_count/$total_services"
              sleep 10
              timeout=$((timeout-10))
            done
            
            # Show service status
            echo "üìä Service status:"
            docker-compose ps
            
            # Show application logs (last 20 lines)
            echo "üìã Application logs:"
            docker-compose logs --tail=20 app
            
            if [ "$FRESH_DEPLOY" = "true" ]; then
              echo "üéâ Fresh deployment completed!"
            else
              echo "üéâ Incremental deployment completed!"
            fi