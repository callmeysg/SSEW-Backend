name: Deploy Commerce Service to EC2

on:
  push:
    branches: [ main ]
    paths:
      - 'commerce-service/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      fresh_deploy:
        description: 'Fresh deployment (removes all data)'
        required: false
        default: 'false'
        type: choice
        options: ['false', 'true']

env:
  REGISTRY: docker.io
  IMAGE_NAME: singhtwenty2/ssew-commerce-service

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./commerce-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Validate code attribution headers
        run: mvn license:check
      - name: Build with Maven
        run: mvn clean package -DskipTests
      - name: Generate build number
        id: build-number
        run: echo "BUILD_NUMBER=$(date +%Y%m%d)-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
        working-directory: .
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./commerce-service
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:prod-${{ steps.build-number.outputs.BUILD_NUMBER }}
            ${{ env.IMAGE_NAME }}:prod-latest

      - name: Deploy Commerce Service to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd /home/ubuntu/ssew-deployment
            
            curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
            
            # Preserve existing TELEMETRY_IMAGE_TAG if it exists
            if [ -f .env ]; then
              export $(grep -v '^#' .env | xargs)
            fi

            # Create .env file from GitHub Secrets for production
            cat > .env << EOF
            COMMERCE_IMAGE_TAG=prod-${{ steps.build-number.outputs.BUILD_NUMBER }}
            TELEMETRY_IMAGE_TAG=${TELEMETRY_IMAGE_TAG:-prod-latest}
            
            # --- Application Profiles ---
            SPRING_PROFILES_ACTIVE=prod
            ENVIRONMENT=prod
            
            # --- Database & Cache Credentials ---
            POSTGRES_DB=${{ secrets.PROD_POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.PROD_POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.PROD_POSTGRES_PASSWORD }}
            REDIS_PASSWORD=${{ secrets.PROD_REDIS_PASSWORD }}
            
            # --- AWS Credentials ---
            AWS_REGION=${{ secrets.PROD_AWS_REGION }}
            AWS_S3_TEMP_BUCKET=${{ secrets.PROD_AWS_S3_BUCKET }}
            AWS_S3_TEMP_FOLDER=temp
            AWS_S3_PERMANENT_FOLDER=permanent
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            
            # --- Security & API Keys ---
            JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
            APP_DEVELOPER_SECRET=${{ secrets.PROD_APP_DEVELOPER_SECRET }}
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            
            # --- Mail Credentials ---
            MAIL_USERNAME=${{ secrets.PROD_MAIL_USERNAME }}
            MAIL_PASSWORD=${{ secrets.PROD_MAIL_PASSWORD }}
            
            # --- Telemetry Service Config ---
            LOG_LEVEL=info
            CORS_ALLOWED_ORIGINS=${{ secrets.PROD_CORS_ALLOWED_ORIGINS }}
            CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,PATCH,OPTIONS,HEAD
            CORS_ALLOWED_HEADERS=Authorization,Content-Type,X-Requested-With,Accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers
            MAX_EVENTS_PER_POLL=50
            DEFAULT_TTL_SECONDS=300
            SHORT_POLL_INTERVAL_MS=5000
            LONG_POLL_INTERVAL_MS=30000
            LONG_POLL_TIMEOUT_MS=25000
            WORKER_POOL_SIZE=100
            REDIS_POOL_SIZE=50
            REDIS_MIN_IDLE_CONNS=10
            EOF

            FRESH_DEPLOY="${{ github.event.inputs.fresh_deploy || 'false' }}"
            
            if [ "$FRESH_DEPLOY" = "true" ]; then
              echo "ðŸ”¥ Fresh deployment requested - removing all data and containers"
              docker-compose down -v
            fi
            
            echo " pulling latest commerce-service image..."
            docker-compose pull commerce-service
            
            echo " recreating commerce-service container..."
            docker-compose up -d --force-recreate --no-deps commerce-service
            
            echo " removing old/unused docker images (older than 1 hour)..."
            docker image prune -af --filter "until=1h"
            
            echo "âœ… Deployment complete. Current status:"
            docker-compose ps