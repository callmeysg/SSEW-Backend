name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: singhtwenty2/ssew-core-service

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Generate build number
        id: build-number
        run: echo "BUILD_NUMBER=$(date +%Y%m%d)-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:staging-${{ steps.build-number.outputs.BUILD_NUMBER }}
            ${{ env.IMAGE_NAME }}:staging-latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Create deployment directory if it doesn't exist
            mkdir -p /home/ubuntu/ssew-deployment
            cd /home/ubuntu/ssew-deployment
            
            # Download docker-compose.yml if it doesn't exist
            if [ ! -f docker-compose.yml ]; then
              curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
            fi
            
            # Set environment variables
            export IMAGE_TAG=staging-${{ steps.build-number.outputs.BUILD_NUMBER }}
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export APP_DEVELOPER_SECRET="${{ secrets.APP_DEVELOPER_SECRET }}"
            export POSTGRES_DB="ssew"
            export POSTGRES_USER="ssew_owner"  
            export POSTGRES_PASSWORD="ssew_staging_pass"
            export REDIS_PASSWORD="redis_staging_pass"
            export AWS_REGION="ap-south-1"
            export AWS_S3_TEMP_BUCKET="ssew-bucket-staging"
            export AWS_S3_TEMP_FOLDER="temp"
            export AWS_S3_PERMANENT_FOLDER="permanent"
            
            # Start database services if not running
            docker-compose up -d postgres redis
            
            # Wait a moment for databases to be ready
            sleep 10
            
            # Pull and deploy the application
            docker-compose pull app
            docker-compose up -d app
            
            # Show running containers
            echo "Currently running containers:"
            docker ps
            
            # Clean up old images
            docker image prune -f
            
            echo "Deployment completed successfully!"