name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: singhtwenty2/ssew-core-service

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Generate build number
        id: build-number
        run: echo "BUILD_NUMBER=$(date +%Y%m%d)-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:staging-${{ steps.build-number.outputs.BUILD_NUMBER }}
            ${{ env.IMAGE_NAME }}:staging-latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Create deployment directory if it doesn't exist
            mkdir -p /home/ubuntu/ssew-deployment
            cd /home/ubuntu/ssew-deployment
            
            # Download latest docker-compose.yml
            curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
            
            # Create .env file with all environment variables
            cat > .env << EOF
            IMAGE_TAG=staging-${{ steps.build-number.outputs.BUILD_NUMBER }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            APP_DEVELOPER_SECRET=${{ secrets.APP_DEVELOPER_SECRET }}
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            POSTGRES_DB=ssew
            POSTGRES_USER=ssew_owner
            POSTGRES_PASSWORD=ssew_staging_pass
            REDIS_PASSWORD=redis_staging_pass
            AWS_REGION=ap-south-1
            AWS_S3_TEMP_BUCKET=ssew-bucket-staging
            AWS_S3_TEMP_FOLDER=temp
            AWS_S3_PERMANENT_FOLDER=permanent
            # Override database URL to use local container
            SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/ssew
            SPRING_DATASOURCE_USERNAME=ssew_owner
            SPRING_DATASOURCE_PASSWORD=ssew_staging_pass
            SPRING_DATA_REDIS_URL=redis://:redis_staging_pass@redis:6379
            EOF
            
            # Set secure permissions on .env file
            chmod 600 .env
            
            # Stop existing containers
            docker-compose down
            
            # Clean up old images
            docker image prune -f
            
            # Pull latest images
            docker-compose pull
            
            # Start all services (databases will start first due to depends_on with health checks)
            docker-compose up -d
            
            # Wait for services to be healthy
            echo "Waiting for services to be healthy..."
            timeout=300
            while [ $timeout -gt 0 ]; do
              if docker-compose ps | grep -E "(healthy|Up)" | wc -l | grep -q "3"; then
                echo "All services are up and healthy!"
                break
              fi
              echo "Waiting for services... ($timeout seconds remaining)"
              sleep 10
              timeout=$((timeout-10))
            done
            
            # Show service status
            echo "Service status:"
            docker-compose ps
            
            # Show application logs (last 50 lines)
            echo "Application logs:"
            docker-compose logs --tail=50 app
            
            # Clean up .env file for security (optional)
            # rm .env
            
            echo "Deployment completed!"