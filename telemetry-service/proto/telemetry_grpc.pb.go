// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.1
// source: proto/telemetry.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TelemetryService_PublishOrderStatusChange_FullMethodName = "/telemetry.TelemetryService/PublishOrderStatusChange"
	TelemetryService_PublishNewOrder_FullMethodName          = "/telemetry.TelemetryService/PublishNewOrder"
	TelemetryService_PublishOrderUpdate_FullMethodName       = "/telemetry.TelemetryService/PublishOrderUpdate"
)

// TelemetryServiceClient is the client API for TelemetryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryServiceClient interface {
	PublishOrderStatusChange(ctx context.Context, in *PublishOrderStatusChangeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PublishNewOrder(ctx context.Context, in *PublishNewOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PublishOrderUpdate(ctx context.Context, in *PublishOrderUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type telemetryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryServiceClient(cc grpc.ClientConnInterface) TelemetryServiceClient {
	return &telemetryServiceClient{cc}
}

func (c *telemetryServiceClient) PublishOrderStatusChange(ctx context.Context, in *PublishOrderStatusChangeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TelemetryService_PublishOrderStatusChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) PublishNewOrder(ctx context.Context, in *PublishNewOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TelemetryService_PublishNewOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) PublishOrderUpdate(ctx context.Context, in *PublishOrderUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TelemetryService_PublishOrderUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryServiceServer is the server API for TelemetryService service.
// All implementations must embed UnimplementedTelemetryServiceServer
// for forward compatibility
type TelemetryServiceServer interface {
	PublishOrderStatusChange(context.Context, *PublishOrderStatusChangeRequest) (*emptypb.Empty, error)
	PublishNewOrder(context.Context, *PublishNewOrderRequest) (*emptypb.Empty, error)
	PublishOrderUpdate(context.Context, *PublishOrderUpdateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTelemetryServiceServer()
}

// UnimplementedTelemetryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTelemetryServiceServer struct {
}

func (UnimplementedTelemetryServiceServer) PublishOrderStatusChange(context.Context, *PublishOrderStatusChangeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishOrderStatusChange not implemented")
}
func (UnimplementedTelemetryServiceServer) PublishNewOrder(context.Context, *PublishNewOrderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishNewOrder not implemented")
}
func (UnimplementedTelemetryServiceServer) PublishOrderUpdate(context.Context, *PublishOrderUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishOrderUpdate not implemented")
}
func (UnimplementedTelemetryServiceServer) mustEmbedUnimplementedTelemetryServiceServer() {}

// UnsafeTelemetryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryServiceServer will
// result in compilation errors.
type UnsafeTelemetryServiceServer interface {
	mustEmbedUnimplementedTelemetryServiceServer()
}

func RegisterTelemetryServiceServer(s grpc.ServiceRegistrar, srv TelemetryServiceServer) {
	s.RegisterService(&TelemetryService_ServiceDesc, srv)
}

func _TelemetryService_PublishOrderStatusChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishOrderStatusChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).PublishOrderStatusChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_PublishOrderStatusChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).PublishOrderStatusChange(ctx, req.(*PublishOrderStatusChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_PublishNewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishNewOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).PublishNewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_PublishNewOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).PublishNewOrder(ctx, req.(*PublishNewOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_PublishOrderUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishOrderUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).PublishOrderUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_PublishOrderUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).PublishOrderUpdate(ctx, req.(*PublishOrderUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelemetryService_ServiceDesc is the grpc.ServiceDesc for TelemetryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemetryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.TelemetryService",
	HandlerType: (*TelemetryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishOrderStatusChange",
			Handler:    _TelemetryService_PublishOrderStatusChange_Handler,
		},
		{
			MethodName: "PublishNewOrder",
			Handler:    _TelemetryService_PublishNewOrder_Handler,
		},
		{
			MethodName: "PublishOrderUpdate",
			Handler:    _TelemetryService_PublishOrderUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/telemetry.proto",
}
